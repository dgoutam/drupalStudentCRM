<?php

/**
 * @file
 * Module for the CRMCase Entity - a starting point to create your own Entity
 * and associated administration interface
 */

include_once('crm_case.features.inc');


/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function crm_case_entity_info() {
  $return['crm_case'] = array(
    'label' => t('Case'),
    'entity class' => 'CRMCase',
    'controller class' => 'CRMCaseController',
    'base table' => 'crm_case',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'cid',
        'bundle' => 'type',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Case'),
        'custom settings' => FALSE,
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'crm_case_create',
    'access callback' => 'crm_case_access',
    'module' => 'crm_case',
    'admin ui' => array(
      'path' => 'crm/case',
      'file' => 'crm_case.admin.inc',
      'controller class' => 'CRMCaseUIController',
      'menu wildcard' => '%crm_case',
    ),
  );

  $return['crm_case_type'] = array(
    'label' => t('Case Type'),
    'entity class' => 'CRMCaseType',
    'controller class' => 'CRMCaseTypeController',
    'base table' => 'crm_case_type',
    'fieldable' => FALSE,
    'bundle of' => 'crm_case',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'crm_case_type_access',
    'module' => 'crm_case',
    'admin ui' => array(
      'path' => 'admin/structure/crm/case-types',
      'file' => 'crm_case_type.admin.inc',
      'controller class' => 'CRMCaseTypeUIController',
      'menu wildcard' => '%crm_case_type',
      'type' => MENU_LOCAL_TASK,
    ),
  );

  return $return;
}

/**
 * Helper function to return the contact of a given case.
 */
function crm_case_get_contact($case) {
  $query = db_select('field_data_endpoints', 'e')
              ->condition('e.entity_type', 'relation')
              ->condition('e.bundle', 'crm_contact_case')
              ->condition('e.endpoints_entity_type', 'crm_case')
              ->condition('e.endpoints_entity_id', $case->cid);
  $query->leftJoin('field_data_endpoints', 'e2', 'e2.entity_id = e.entity_id AND e2.entity_type = e.entity_type');
  $query->fields('e2', array('endpoints_entity_id'))
              ->condition('e2.endpoints_entity_type', 'crm_core_contact');
  $id = $query->execute()
              ->fetchField();
  if ($id) {
    return crm_core_contact_load($id);
  }
  return FALSE;
}

/**
 * Implements hook_block_info().
 */
function crm_case_block_info() {
  $blocks['crm_create_case'] = array('info' => 'Create case form');
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function crm_case_block_view($delta) {
   module_load_include('inc', 'crm_case', 'crm_case.blocks');
   $function_name = 'crm_case_blocks_'. $delta;
   if (function_exists($function_name)) {
     return $function_name();
   }
}

/**
 * Implements hook_crm_case_delete
 * Finds any relation entities that reference this case and deletes them
 */
function crm_case_crm_case_delete($case) {
  $relations = db_select('field_data_endpoints', 'e')
             ->fields('e', array('entity_id'))
             ->condition('e.endpoints_entity_id', $case->cid)
             ->condition('e.endpoints_entity_type', 'crm_case')
             ->condition('e.entity_type', 'relation')
             ->execute()
             ->fetchAllKeyed();
  relation_multiple_delete($relations);
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the crm_case types via a hook to avoid a recursion
 * issue as loading the crm_case types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function crm_case_entity_info_alter(&$entity_info) {
  foreach (crm_case_get_types() as $type => $info) {
    $entity_info['crm_case']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/crm/case-types/manage/%crm_case_type',
        'real path' => 'admin/structure/crm/case-types/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('administer crm_case types'),
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function crm_case_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer crm_case types' => array(
      'title' => t('Administer crm_case types'),
      'description' => t('Create and delete fields for crm_case types, and set their permissions.'),
    ),
    'administer crm_cases' => array(
      'title' => t('Administer crm_cases'),
      'description' => t('Edit and delete all crm_cases'),
    ),
    'open and close cases' => array(
      'title' => t('Open and close cases'),
      'description' => t('Change the status of any crm case.'),
    ),
  );
  
  //Generate permissions per crm_case 
  foreach (crm_case_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name crm_case" => array(
        'title' => t('%type_name: Edit any crm_case', array('%type_name' => $type->label)),
      ),
      "view any $type_name crm_case" => array(
        'title' => t('%type_name: View any crm_case', array('%type_name' => $type->label)),
      ),
      "delete any $type_name crm_case" => array(
        'title' => t('%type_name: Delete any crm_case', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;  
}


/**
 * Determines whether the given user has access to a crm_case.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $crm_case
 *   Optionally a crm_case or a crm_case type to check access for. If nothing is
 *   given, access for all crm_cases is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function crm_case_access($op, $crm_case = NULL, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  if (user_access('administer crm_cases', $account)) {
    return TRUE;
  }
  if (isset($crm_case) && $type_name = $crm_case->type) {
    if (user_access("$op any $type_name crm_case", $account)) {
      return TRUE;
    }
    if ($op == 'delete') {
      return user_access("$op any $type_name crm_case", $account); 
    }
  }
  $type = crm_case_get_types($crm_case->type);
  if ($type->data['contact_edit']) {
    return TRUE;
    $contact = crm_case_get_contact($crm_case);
    if ($account->crm_contact_records[$contact->contact_id]) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function crm_case_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer crm_case types', $account);
}


/**
 * Gets an array of all crm_case types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return CRMCaseType[]
 *   Depending whether $type isset, an array of crm_case types or a single one.
 */
function crm_case_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our crm_case entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('crm_case_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a crm_case type by string.
 *
 * @param $type
 *   The machine-readable name of a crm_case type to load.
 * @return
 *   A crm_case type array or FALSE if $type does not exist.
 */
function crm_case_type_load($type) {
  return crm_case_get_types($type);
}

/**
 * Fetch a crm_case object. Make sure that the wildcard you choose 
 * in the crm_case entity definition fits the function name here.
 *
 * @param $cid
 *   Integer specifying the crm_case id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $crm_case object or FALSE if it cannot be loaded.
 *
 * @see crm_case_load_multiple()
 */
function crm_case_load($cid, $reset = FALSE) {
  $crm_cases = crm_case_load_multiple(array($cid), array(), $reset);
  return reset($crm_cases);
}


/**
 * Load multiple crm_cases based on certain conditions.
 *
 * @param $cids
 *   An array of crm_case IDs.
 * @param $conditions
 *   An array of conditions to match against the {crm_case} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of crm_case objects, indexed by cid.
 *
 * @see entity_load()
 * @see crm_case_load()
 */
function crm_case_load_multiple($cids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('crm_case', $cids, $conditions, $reset);
}


/**
 * Deletes a crm_case.
 */
function crm_case_delete(CRMCase $crm_case) {
  $crm_case->delete();
}


/**
 * Delete multiple crm_cases.
 *
 * @param $cids
 *   An array of crm_case IDs.
 */
function crm_case_delete_multiple(array $cids) {
  entity_get_controller('crm_case')->delete($cids);
}


/**
 * Create a crm_case object.
 */
function crm_case_create($values = array()) {
  return entity_get_controller('crm_case')->create($values);
}


/**
 * Saves a crm_case to the database.
 *
 * @param $crm_case
 *   The crm_case object.
 */
function crm_case_save(CRMCase $crm_case) {
  $crm_case->save();
}


/**
 * Saves a crm_case type to the db.
 */
function crm_case_type_save(CRMCaseType $type) {
  $type->save();
}


/**
 * Deletes a crm_case type from the db.
 */
function crm_case_type_delete(CRMCaseType $type) {
  $type->delete();
}


/**
 * URI callback for crm_cases
 */
function crm_case_uri(CRMCase $crm_case){
  return array(
    'path' => 'crm/case/' . $crm_case->cid,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function crm_case_page_title(CRMCase $crm_case){
  return $crm_case->name;
}


/**
 * Sets up content to show an individual crm_case
 * @todo - get rid of drupal_set_title();
 */
function crm_case_page_view($crm_case, $view_mode = 'full') {    
  $controller = entity_get_controller('crm_case');  
  $content = $controller->view(array($crm_case->cid => $crm_case));
  drupal_set_title($crm_case->name);
  return $content;
}


/**
 * Implement hook_theme().
 */
function crm_case_theme() {
  return array(
    'crm_case_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'crm_case.admin.inc',
    ),
    'crm_case' => array(
      'render element' => 'elements',
      'template' => 'crm_case',
    ),
  );
}  

/**
 * Add default status field to a case type.
 *
 * @param $type
 *   A crm case type object.
 * @param $label
 *   The label for the status instance.
 *
 * @return
 *   Status field instance.
 */
function crm_case_add_status_field($type) {
  $field = field_info_field('case_status');
  $instance = field_info_instance('crm_case', 'case_status', $type->type);
  if (empty($field)) {
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'case_status',
      'foreign keys' => array(),
      'indexes' => array(
        'value' => array(
          0 => 'value',
        ),
      ),
      'module' => 'list',
      'settings' => array(
        'allowed_values' => array(
          0 => t('Closed'),
          1 => t('Open'),
        ),
        'allowed_values_function' => '',
      ),
      'translatable' => '0',
      'type' => 'list_boolean',
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'bundle' => $type->type,
      'default_value' => array(
        0 => array(
          'value' => 1,
        ),
      ),
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'list',
          'settings' => array(),
          'type' => 'list_default',
          'weight' => 1,
        ),
      ),
      'entity_type' => 'crm_case',
      'field_name' => 'case_status',
      'label' => t('Case is open'),
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(
          'display_label' => 1,
        ),
        'type' => 'options_onoff',
        'weight' => '2',
      ),
    );
    $instance = field_create_instance($instance);
  }
  return $instance;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function crm_case_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/crm_cases/add' on 'admin/structure/crm_cases'.
  if ($root_path == 'crm/case') {
    $item = menu_get_item('crm/case/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for crm_case entities
 */
class CRMCase extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'crm_case');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'crm/case/' . $this->cid);
  }
  
  public function save() {
    parent::save();
    if ($this->crm_contact_id) {
      $contact = crm_core_contact_load($this->crm_contact_id);
      $relation = relation_create('crm_contact_case', array(
                      array('entity_type' => 'crm_case',
                             'entity_bundle' => $this->type,
                             'entity_id' => $this->cid,
                             'r_index' => 0,
                             ),
                        array('entity_type' => 'crm_core_contact',
                               'entity_bundle' => $contact->type, 
                               'entity_id' => $contact->contact_id,
                               'r_index' => 1, 
                            )
                   ));
      relation_save($relation);
      $rid = $relation->rid;
      $case_type = crm_case_type_load($this->type);
      if ($case_type->data['email_contact']) {
        $email = field_get_items('crm_core_contact', $contact, 'field_contact_email');
        if (valid_email_address($email[0]['email'])) {
          $email_body = token_replace($case_type->data['email_body']['value'], array(
                            'crm_core_contact' => $contact,
                            'crm_case' => $this,
                          ));
          $email_body = check_markup($email_body, $case_type->data['email_body']['format']);
          $email_options = array('body' => $email_body,
                                 'subject' => check_plain($case_type->data['email_subject']));
          drupal_mail('crm_case', 'crm_case_create', $email[0]['email'], language_default(), $email_options);
        }
      }
    }
  }
  
}


/**
 * The class used for crm_case type entities
 */
class CRMCaseType extends Entity {
  
  public $type;
  public $label;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'crm_case_type');
  }
  
}


/**
 * The Controller for CRMCase entities
 */
class CRMCaseController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a crm_case - we first set up the values that are specific
   * to our crm_case schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the crm_case.
   *
   * @return
   *   A crm_case object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our CRMCase
    $values += array( 
      'cid' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );
    
    $crm_case = parent::create($values);
    return $crm_case;
  }
  
  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    $content['crm_case_sample_data'] =  array(
      '#markup' => theme('crm_case_sample_data', array('crm_case_sample_data' => check_plain($entity->data['sample_data']), 'crm_case' => $entity)),
    );

    return $content;
  }
  
}


/**
 * The Controller for CRMCase entities
 */
class CRMCaseTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
   /**
   * Create a crm_case type - we first set up the values that are specific
   * to our crm_case type schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the crm_case.
   *
   * @return
   *   A crm_case type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our CRMCase
    $values += array( 
      'id' => '',
      'is_new' => TRUE,
      'instructions' => '',
      'data' => '',
    );
    $crm_case_type = parent::create($values);
    return $crm_case_type;
  }

}

/**
 * UI controller.
 */
class CRMCaseUIController extends EntityDefaultUIController {

  /**
   * Overrides hook_menu() defaults. Main reason for doing this is that
   * parent class hook_menu() is optimized for entity type administration.
   */
  public function hook_menu() {
    
    $items = array();
    $id_count = count(explode('/', $this->path));
    $wildcard = isset($this->entityInfo['admin ui']['menu wildcard']) ? $this->entityInfo['admin ui']['menu wildcard'] : '%' . $this->entityType;

    $items[$this->path] = array(
      'title' => 'CRMCases',
      'description' => 'Add edit and update crm_cases.',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file path' => drupal_get_path('module', 'system'),
      'file' => 'system.admin.inc',
    );
    
    // Change the overview menu type for the list of crm_cases.
    $items[$this->path]['type'] = MENU_LOCAL_TASK;
    
    // Change the add page menu to multiple types of entities
    $items[$this->path . '/add'] = array(
      'title' => 'Add a crm_case',
      'description' => 'Add a new crm_case',
      'page callback'  => 'crm_case_add_page',
      'access callback'  => 'crm_case_access',
      'access arguments' => array('edit'),
      'type' => MENU_NORMAL_ITEM,
      'weight' => 20,
      'file' => 'crm_case.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])

    );

    // Add menu items to add each different type of entity.
    foreach (crm_case_get_types() as $type) {
      $items[$this->path . '/add/' . $type->type] = array(
        'title' => 'Add ' . $type->label,
        'page callback' => 'crm_case_form_wrapper',
        'page arguments' => array(crm_case_create(array('type' => $type->type))),
        'access callback' => 'crm_case_access',
        'access arguments' => array('edit', 'edit ' . $type->type),
        'file' => 'crm_case.admin.inc',
        'file path' => drupal_get_path('module', $this->entityInfo['module'])
      );
    }

    // Loading and editing crm_case entities
    $items['crm/case/' . $wildcard] = array(
      'page callback' => 'crm_case_form_wrapper',
      'page arguments' => array(2),
      'access callback' => 'crm_case_access',
      'access arguments' => array('edit', 2),
      'weight' => 0,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'type' => MENU_LOCAL_TASK,
      'file' => 'crm_case.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])
    );
    
    $items['crm/case/' . $wildcard . '/edit'] = array(
      'title' => 'Edit',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('crm_case_edit_form', 2),
      'access callback' => 'crm_case_access',
      'access arguments' => array('edit', 2),
      'file' => 'crm_case.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module']),
      'weight' => 2,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );
    
    $items['crm/case/' . $wildcard . '/delete'] = array(
      'title' => 'Delete',
      'page callback' => 'crm_case_delete_form_wrapper',
      'page arguments' => array(2),
      'access callback' => 'crm_case_access',
      'access arguments' => array('edit', 2),
      'type' => MENU_CALLBACK,
      'context' => MENU_CONTEXT_INLINE,
      'file' => 'crm_case.admin.inc',
      'file path' => drupal_get_path('module', $this->entityInfo['module'])
    );
    
    // Menu item for viewing crm_cases
    $items['crm/case/' . $wildcard] = array(
      //'title' => 'Title',
      'title callback' => 'crm_case_page_title',
      'title arguments' => array(2),
      'page callback' => 'crm_case_page_view',
      'page arguments' => array(2),
      'access callback' => 'crm_case_access',
      'access arguments' => array('view', 2),
      'type' => MENU_NORMAL_ITEM,
    );
    
    $items['crm/case/' . $wildcard .'/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
    return $items;
  }
  
  
  /**
   * Create the markup for the add CRMCase Entities page within the class
   * so it can easily be extended/overriden.
   */ 
  public function addPage() {
    $item = menu_get_item();
    $content = system_admin_menu_block($item);

    if (count($content) == 1) {
      $item = array_shift($content);
      drupal_goto($item['href']);
    }    
        
    return theme('crm_case_add_list', array('content' => $content));
  }
  
}

/**
 * UI controller.
 */
class CRMCaseTypeUIController extends EntityDefaultUIController {

  /**
   * Overrides hook_menu() defaults.
   */
  public function hook_menu() {
    $items = parent::hook_menu();
    $items[$this->path]['description'] = 'Manage cases, including adding
    and removing fields and the display of fields.';
    $items[$this->path]['type'] = MENU_LOCAL_TASK;
    return $items;
  }
}

/**
 * Implements hook_feeds_plugins().
 */
function crm_case_feeds_plugins() {
  $info['CRMCaseFeedsProcessor'] = array(
    'name' => 'CRM Case processor',
    'description' => 'Add and update cases attached to contacts.',
    'help' => 'Create and update cases from parsed content.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'CRMCaseFeedsProcessor',
      'file' => 'CRMCaseFeedsProcessor.inc',
      'path' => drupal_get_path('module', 'crm_case') . '/plugins',
    ),
  );
  return $info;
}

/*
 * Implements hook_enable().
 */
function crm_case_enable() {
  //clear the cache to display in Feeds as available plugin.
  cache_clear_all('plugins:feeds:plugins', 'cache');
}

/**
 * Implements hook_mail().
 */
function crm_case_mail($key, &$message, $params) {
  if ($key == 'crm_case_create') {
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['body'];
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  }
}

/** 
 * Implements hook_crm_student_search_query().
 */
function crm_case_crm_student_search_destination($query) {
  $query = explode(' ', $query);
  if(strtolower($query[0]) == t('case') && $query[1]) {
    $cid = db_select('crm_case', 'c')
             ->condition('cid', intval($query[1]))
             ->fields('c', array('cid'))
             ->execute()
             ->fetchField();
    if($cid) {
      return array('url' => 'crm/case/'. $cid);
    }
    return array('url' => 'crm/cases/all',
                 'query' => array('cid' => intval($query[1])));
  }
}

/**
 * Implements hook_crm_student_admin_links().
 */
function crm_case_crm_student_admin_links() {
  return array(
    'crm_cases' => array(
      'group' => t('Cases'),
      'title' => t('Manage case types'),
      'description' => t('Manage the types of cases that can be opened on contacts.'),
      'href' => 'admin/structure/crm/case-types',
    ),
  );
}

/**
 * Implementation of hook_FORM_ID_alter().
 */
function crm_case_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  $form['instance']['crm_case_contact_editable'] = array(
    '#type' => 'checkbox',
    '#title' => 'This field is editable by the contact related to the case.',
    '#default_value' => isset($form['#instance']['crm_case_contact_editable']) ? $form['#instance']['crm_case_contact_editable'] : 0,
  );
}

/**
 * Implementation of hook_FORM_ID_alter().
 * We're removing case types from the case search view which the user does not have access to.
 */
function crm_case_form_views_exposed_form_alter(&$form, $form_state) {
  if ($form_state['view']->name != 'crm_cases') {
    return;
  }
  foreach ($form['type']['#options'] as $key => $title) {
    if (!user_access("view any $key crm_case")) {
      unset($form['type']['#options'][$key]);
    }
  }
}
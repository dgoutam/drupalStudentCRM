<?php
/**
 * @file
 * Code for the Student CRM Webform feature.
 */

if (module_exists('relation_endpoint')) {
  include_once('student_crm_webform.features.inc');
}

/**
 * Implements hook_init().
 */
function student_crm_webform_init() {
  drupal_add_js(drupal_get_path('module', 'student_crm_webform') . '/js/student_crm_webform.fancybox.js');
}

/**
 * Implements hook_menu().
 */
function student_crm_webform_menu() {
  $items = array();
  
  $items['crm/webform/%/%/%node/%/%'] = array(
    'page callback' => 'student_crm_webform_complete_form',
    'page arguments' => array(2, 3, 4, 6),
    'access arguments' => array(2, 3, 4, 5),
    'access callback' => 'student_crm_webform_complete_form_access',
  );
  
  $items['ajax/crm/webform-list'] = array(
    'page callback' => 'student_crm_webform_ajax_webform_list',
    'access arguments' => array('access content'),
  );
  
  $items['crm/case/%/email_link/%/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('student_crm_webform_get_email_link_form', 2, 4, 5),
    'access arguments' => array('retrieve webform links'),
  );

  $items['crm/case/%/reminders'] = array(
    'title' => 'Email reminders',
    'page callback' => 'student_crm_webform_reminder_manage',
    'page arguments' => array(2),
    'access callback' => 'student_crm_webform_reminder_manage_access',
    'access arguments' => array(2),
    'file' => 'student_crm_webform.mail.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['crm/case/%/reminders/delete/%/%'] = array(
    'title' => 'Delete email reminder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('student_crm_webform_reminder_manage_delete', 2, 5, 6),
    'access callback' => 'student_crm_webform_reminder_manage_access',
    'access arguments' => array(2),
    'file' => 'student_crm_webform.mail.inc',
  );
  
  $items['thank-you/%node'] = array(
    'title' => 'Thank you',
    'page callback' => 'student_crm_webform_thank_you_page',
    'page arguments' => array(1),
    'access arguments' => array('complete crm webforms'),
  );
  
  return $items;
}

function student_crm_webform_reminder_manage_access($case_id) {
  if (!user_access('manage crm webforms')) {
    return FALSE;
  }
  $reminders = db_select('student_crm_webform', 'w')
                ->condition('entity_type', 'crm_case')
                ->condition('entity_id', $case_id)
                ->fields('w', array('email'))
                ->execute()
                ->fetchField();
  return ($reminders) ? TRUE : FALSE;
}

function student_crm_webform_thank_you_page($node) {
  
  return $node->webform['confirmation'];
}

/**
 * Autocomplete to provide a list of webforms in the site.
 */
function student_crm_webform_ajax_webform_list($string = '') {
  $matches = array();
  if ($string) {
    $result = db_select('node')->fields('node', array('title'))->condition('status', 1)->condition('title', db_like($string) . '%', 'LIKE')->condition('type', 'webform')->range(0, 10)->execute();
    foreach ($result as $webform) {
      $matches[$webform->title] = check_plain($webform->title);
    }
  }

  drupal_json_output($matches);
}

/**
 *  Implements hook_block_info().
 */
function student_crm_webform_block_info() {
  $blocks['student_crm_webform_send_form'] = array('info' => 'Send form emails');
  $blocks['student_crm_webform_contact'] = array('info' => 'Send contact form emails');
  $blocks['student_crm_webform_retrieve'] = array('info' => 'Retrieve email links');
  return $blocks;
}

/**
 *  Implements hook_block_view().
 */
function student_crm_webform_block_view($delta) {
  if ($delta == 'student_crm_webform_retrieve' && user_access('retrieve webform links')) {
    return array('subject' => t('Get form links'),
                 'content' => student_crm_webform_get_email_links());  
  }
  if (!user_access('manage crm webforms')) {
    return;
  }
  module_load_include('inc', 'student_crm_webform', 'student_crm_webform.mail');
  if ($delta == 'student_crm_webform_send_form') {
    return array('subject' => t('Send forms'),
                 'content' => drupal_get_form('student_crm_webform_send_email_form'));  
  }
  if ($delta == 'student_crm_webform_send_contact_form') {
    return array('subject' => t('Send forms'),
                 'content' => drupal_get_form('student_crm_webform_send_contact_email_form'));  
  }
}

/**
 * View a list of email addresses to give manual links 
 */
function student_crm_webform_get_email_links() {
  $case = menu_get_object('crm_case', 2);
  $fields = field_info_instances();
  $fields = $fields['crm_case'][$case->type];
  $list = array();
  foreach ($fields as $field_name => $field) {
    if ($field['settings']['webform'] && $field['settings']['email_field']) {
      $list[$field_name]['data'] = $field['label'];
      $emails = field_get_items('crm_case', $case, $field['settings']['email_field']);
      if (is_array($emails)) {
        foreach ($emails as $email) {
           $list[$field_name]['children'][] = l($email['email'], 'crm/case/' . $case->cid . '/email_link/' . $field['settings']['webform'] . '/' . $email['email']);
        }
      }
    }
  }
  return theme('item_list', array('items' => $list, 'attributes' => array('class' => array('webform-entity-modal'))));
}

/**
 * Page callback that displays a link.
 */

function student_crm_webform_get_email_link_form($form, $form_state, $case_id, $webform, $email) {
  $link = url('crm/webform/crm_case/' . $case_id . '/' . $webform . '/' . _student_crm_webform_generate_key('crm_case', $case_id, $webform) . '/' . $email, array('absolute' => TRUE));
  
  $form['email_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Email link for @email', array('@email' => $email)),
    '#default_value' => $link,
  );
  
  return $form;
}

/**
 * Access callback - ensures the user's key is accurate & they have access to complete forms.
 */
function student_crm_webform_complete_form_access($entity_type, $entity_id, $webform, $key) {
  if (!user_access('complete crm webforms')) {
    return FALSE;
  }
  if ($key != _student_crm_webform_generate_key($entity_type, $entity_id, $webform->nid)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Page callback - sets a session key for reusing later when the user submits a form.
 */
function student_crm_webform_complete_form($entity_type, $entity_id, $webform, $email) {
  $_SESSION['student_crm_webform_form'][$webform->nid] = array('entity_type' => $entity_type,
                                                               'entity_id' => $entity_id,
                                                               'email' => $email,
                                                               );
  drupal_goto('node/' . $webform->nid);
}

/**
 * Implements hook_node_view().
 * Here we remove the title of the node if it is being viewed as part of a student form.
 */
function student_crm_webform_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'webform' && $view_mode == 'full' && isset($_SESSION['student_crm_webform_form'][$node->nid])) {
    $node->title = NULL;
    if ($_SESSION['student_crm_webform_form'][$node->nid]['entity_type'] == 'crm_case') {
      $case = crm_case_load($_SESSION['student_crm_webform_form'][$node->nid]['entity_id']);
      $contact = crm_case_get_contact($case);
    }
    if ($_SESSION['student_crm_webform_form'][$node->nid]['entity_type'] == 'crm_core_contact') {
      $case = FALSE;
      $contact = crm_core_contact_load($_SESSION['student_crm_webform_form'][$node->nid]['entity_id']);
    }
    
    $name = field_get_items('crm_core_contact', $contact, 'contact_name');
    $name = name_format($name[0], 'g+if');
    $items[] = t('<strong>Name:</strong> @name', array('@name' => $name));
    if ($case) {
      $items[] = t('<strong>Case:</strong> @case', array('@case' => $case->name));
    }
    $node->content['body'][0]['#markup'] = theme('item_list', array('items' => $items)) . $node->content['body'][0]['#markup'];
  }
}

/**
 * Helper function to generate a form access key.
 */
function _student_crm_webform_generate_key($entity_type, $entity_id, $webform_nid) {
  return drupal_hmac_base64($entity_type . ':' . 
                            $entity_id . ':' . 
                            $webform_nid . ':',
                            drupal_get_hash_salt());
}

/**
 * Implements hook_permission().
 */
function student_crm_webform_permission() {
  return array('complete crm webforms' => array(
                 'title' => t('Fill out webforms attached to CRM entities'),
                 'description' => t('Allowed to complete webforms that are later attached to CRM contacts or cases.')),
               'manage crm webforms' => array(
                 'title' => t('Manage case webforms'),
                 'description' => t('Allowed to re-send and manage webforms attached to cases.')),
               'retrieve webform links' => array(
                 'title' => t('Manually retrieve webform links'),
                 'description' => t('Allowed to retrieve links for completing webforms attached to cases.')),
                 );
}

/**
 * Implements hook_webform_submission_entity_insert().
 */
function student_crm_webform_webform_submission_entity_insert($entity) {
  if (!isset($_SESSION['student_crm_webform_form'][$entity->nid])) {
    return;
  }
  $submission = $_SESSION['student_crm_webform_form'][$entity->nid];
  if ($submission['entity_type'] == 'crm_core_contact') {
    $target = crm_core_contact_load($submission['entity_id']);
    $target_type = $target->type;
  }
  
  $relation = relation_create('webform_submission_to_entities', array(
                    array('entity_type' => 'webform_submission_entity',
                         'entity_id' => $entity->wsid,
                         'r_index' => 0,
                         ),
                    array('entity_type' => $submission['entity_type'],
                           'entity_bundle' => $target_type, 
                           'entity_id' => $submission['entity_id'],
                           'r_index' => 1,
                         ),
                    )
               );
  relation_save($relation);
  $fields = array('submission_id' => $entity->wsid);
  db_update('student_crm_webform', $fields)
        ->condition('entity_type', $submission['entity_type'])
        ->condition('entity_id', $submission['entity_id'])
        ->condition('email', $submission['email'])
        ->fields($fields)
        ->execute();

  drupal_set_message(t('Thank you for your submission.'));
  drupal_goto('thank-you/' . $entity->nid);
}

/**
* Implements hook_theme_registry_alter().
*/
function student_crm_webform_theme_registry_alter(&$theme_registry) {
  $theme_registry['webform_submission_page']['path'] = drupal_get_path('module', 'student_crm_webform');
  $theme_registry['webform_submission_page']['template'] = '/templates/webform-submission-page';
  $theme_registry['webform_submission_page']['path'] = drupal_get_path('module', 'student_crm_webform');
  $theme_registry['webform_submission_page']['template'] = '/templates/webform-submission-page';
}

/**
 * Implements hook_action_info().
 */
function student_crm_webform_action_info() {
  return array(
    'student_crm_webform_action_send_form_email' => array(
        'type' => 'system',
        'label' => t('Send form email'),
        'configurable' => TRUE,
        'triggers' => array('any'),
      ),
  );
}

/**
 * Implements hook_field_info().
 */
function student_crm_webform_field_info() {
  return array(
    'student_crm_webform_attach' => array(
      'label' => t('Attached form'),
      'description' => t('Attach a form that needs to be filled out by a user or anonymous person.'),
      'settings' => array(),
      'instance_settings' => array( ),
      'default_widget' => 'student_crm_webform_field_widget',
      'default_formatter' => 'attached_form',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function student_crm_webform_field_widget_info() {
  return array(
    'student_crm_webform_field_widget' => array(
      'label' => t('Attached form'),
      'field types' => array('student_crm_webform_attach'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_hook_field_widget_form().
 */
function hook_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  return array();
}

/**
 * Implements hook_field_instance_settings_form().
 */
function student_crm_webform_field_instance_settings_form($field, $instance) {
  $defaults   = field_info_instance_settings($field['type']);
  $settings   = array_merge($defaults, $instance['settings']);

  $form = array();
  
  $webforms = db_select('node', 'n')
              ->fields('n', array('nid', 'title'))
              ->condition('n.type', 
                          variable_get('webform_node_types', array('webform')), 'in')
              ->condition('n.status', 1)
              ->execute()
              ->fetchAllKeyed();
              
  
  $form['webform'] = array(
    '#type' => 'select',
    '#title' => t('Required form'),
    '#default_value' => (isset($settings['webform'])) ? $settings['webform'] : 0,
    '#options' => $webforms,
  );
  
  $form['webform'] = array(
    '#type' => 'select',
    '#title' => t('Required form'),
    '#default_value' => (isset($settings['webform'])) ? $settings['webform'] : 0,
    '#options' => $webforms,
  );
  
  $form['email_address'] = array(
    '#type' => 'select',
    '#title' => 'Who should receive the email for this form?',
    '#default_value' => (isset($settings['email_address'])) ? $settings['email_address'] : 'manual',
    '#options' => array('contact' => 'Contact attached to the case',
                        'manual'  => 'Manual entry',
                        'field'   => 'Email address from another field'
                        ),
  );
  
  $email_field_options = array();
  $fields = field_info_instances();
  $fields = $fields[$instance['entity_type']][$instance['bundle']];
  foreach ($fields as $field_name => $field) {
    if ($field['widget']['module'] == 'email') {
      $email_field_options[$field_name] = $field['label'];
    }
  }
  $form['email_field'] = array(
    '#type' => 'select',
    '#prefix' => '<div id="email-field-source-select">',
    '#suffix' => '</div>',
    '#title' => t('Email field'),
    '#default_value' => (isset($settings['email_field'])) ? $settings['email_field'] : 0,
    '#options' => $email_field_options,
  );
  
   $form['email_reminder'] = array(
    '#type' => 'select',
    '#title' => t('Email reminders'),
    '#default_value' => (isset($settings['email_reminder'])) ? $settings['email_reminder'] : 0,
    '#options' => array(0 => t('-- No reminders --'),
                        (7 * 24 * 60 * 60) => t('7 days'),
                        (14 * 24 * 60 * 60) => t('14 days'),
                        (30 * 24 * 60 * 60) => t('30 days'),
                        ),
  );
  
  $form['email_reminder_count'] = array(
    '#type' => 'select',
    '#title' => t('Number of reminders to send'),
    '#default_value' => (isset($settings['email_reminder_count'])) ? $settings['email_reminder_count'] : 0,
    '#options' => array(0 => t('-- No reminders --'),
                        1 => 1,
                        2 => 2,
                        3 => 3,
                        4 => 4,
                        ),
  );

  $form['email_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Email subject'),
    '#default_value' => (isset($settings['email_subject'])) ? $settings['email_subject'] : '',
  );
  
  $form['email_body'] = array(
    '#type' => 'text_format',
    '#title' => t('Email body'),
    '#default_value' => (isset($settings['email_body']['value'])) ? $settings['email_body']['value'] : '',
    '#format' => (isset($settings['email_body']['format'])) ? $settings['email_body']['format'] : NULL,
  );
  
  if (module_exists('token')) {
    $form['email_tokens'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('crm_case', 'crm_core_contact'),
    );
  }

  return $form;
}

/**
 * Implements hook_field_validate().
 */
function student_crm_webform_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * Implements hook_field_presave().
 */
function student_crm_webform_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if (!$instance['settings']['email_field']) {
    return;
  }
  module_load_include('inc', 'student_crm_webform', 'student_crm_webform.mail');
  $entity_id = ($entity_type == 'crm_case') ? $entity->cid : $entity->contact_id;
  if (!$entity_id) {
    return;
  }
  $old_entity = ($entity_type == 'crm_case') ? crm_case_load($entity_id) : crm_core_contact_load($entity_id);
  $reminders = field_get_items($entity_type, $entity, $instance['settings']['email_field']);
  $old_email = field_get_items($entity_type, $old_entity, $instance['settings']['email_field']);
  foreach ($reminders as $email) {
    $emails[$email['email']] = $email;
    $existing = db_select('student_crm_webform', 'w')
                  ->condition('entity_type', $entity_type)
                  ->condition('entity_id', $entity_id)
                  ->condition('entity_field', $field['field_name'])
                  ->condition('email', $email['email'])
                  ->fields('w', array('email'))
                  ->execute()
                  ->fetchField();
    if (!$existing) {
      student_crm_webform_send_email($entity_type, $entity, $field['field_name'], array($email['email']), TRUE); 
    }
  }
  foreach ($old_email as $old) {
    if (!$emails[$old['email']]) {
      db_delete('student_crm_webform')
        ->condition('entity_type', $entity_type)
        ->condition('entity_id', $entity_id)
        ->condition('entity_field', $field['field_name'])
        ->condition('email', $old['email'])
        ->execute();
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function student_crm_webform_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  return array();
}

/**
 * Implements hook_field_is_empty().
 */
function student_crm_webform_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_formatter_info().
 */
function student_crm_webform_field_formatter_info() {
  return array(
    'attached_form' => array(
      'label' => t('Attached form (default)'),
      'field types' => array('student_crm_webform_attach'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function student_crm_webform_theme() {
  return array(
    'student_crm_webform_formatter_attached_form' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Theme function for 'default' or global attached form field formatter.
 */
function theme_student_crm_webform_formatter_attached_form($element) {
  return NULL;
}

/**
 * Implements hook_mail().
 */
function student_crm_webform_mail($key, &$message, $params) {
  if ($key == 'form_prompt') {
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['body'];
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  }
}

/**
 * Implements hook_token_info().
 */
function student_crm_webform_token_info() {
  $link = array('student_crm_webform_link' => array(
              'name' => t('Link to fill out form'),
              'description' => t('Provides a link to complete a form emailed to a user.'),
            ),
  );
  return array('tokens' => array('crm_case'    => $link,
                                 'crm_core_contact' => $link));
}

/**
 * Implements hook_tokens().
 */
function student_crm_webform_tokens($type, $tokens, $data = array(), $options = array()) {
  if (!in_array($type, array('crm_case', 'crm_core_contact'))) {
    return;
  }
  if ($data['entity_type'] == 'crm_case') {
    $id = $data['crm_case']->cid;
  }
  if ($data['entity_type'] == 'crm_core_contact') {
    $id = $data['crm_core_contact']->contact_id;
  }
  return array('[crm_case:student_crm_webform_link]' => 
      url('crm/webform/' . $data['entity_type'] . '/' . $id . '/' . $data['webform'] . '/' . _student_crm_webform_generate_key($data['entity_type'], $id, $data['webform']) . '/' . $data['email'],
       array('absolute' => TRUE))
              );
}

/**
 * Implements hook_crm_student_admin_links().
 */
function student_crm_webform_crm_student_admin_links() {
  return array(
    'webform_create' => array(
      'group' => t('Web Forms'),
      'title' => t('Add a new web form template'),
      'description' => t('Create a new web form template.'),
      'href' => 'node/add/webform',
    ),
    'webform_manage' => array(
      'group' => t('Web Forms'),
      'title' => t('Manage web forms'),
      'description' => t('View, edit, and delete existing webforms.'),
      'href' => 'admin/content/webform',
    ),
  );
}

/**
 * Implements hook_cron().
 */
function student_crm_webform_cron() {
  $last_date = variable_get('student_crm_webform_cron_date', 0);
  $result = db_select('student_crm_webform', 'w')
              ->condition('send_date', $last_date, '>=')
              ->condition('send_date', time(), '<=')
              ->condition('submission_id', 0)
              ->fields('w')
              ->execute()
              ->fetchAll();
  $settings = array();
  $fields = field_info_instances();
  $load_functions = array('crm_case' => 'crm_case_load',
                          'crm_core_contact' => 'crm_core_contact_load');
  module_load_include('inc', 'student_crm_webform', 'student_crm_webform.mail');
  foreach ($result as $row) {
    $entity_load_function = $load_functions[$row->entity_type];
    $entity = $entity_load_function($row->entity_id);
    $settings = $fields[$row->entity_type][$entity->type][$row->entity_field]['settings'];
    student_crm_webform_send_email($row->entity_type, $entity, $row->entity_field, array($row->email), FALSE);
    if ($settings['email_reminder_count'] < $row->reminders_sent + 1) {
      db_delete('student_crm_webform')
        ->condition('entity_type', $row->entity_type)
        ->condition('entity_id', $row->entity_id)
        ->condition('entity_field', $row->entity_field)
        ->condition('email', $row->email)
        ->execute();
    }
    else {
      db_update('student_crm_webform')
        ->fields(array('send_date' => time() + $settings['email_reminder'],
                       'reminders_sent' => $row->reminders_sent + 1))
        ->condition('entity_type', $row->entity_type)
        ->condition('entity_id', $row->entity_id)
        ->condition('entity_field', $row->entity_field)
        ->condition('email', $row->email)
        ->execute();
    }
  }

  variable_set('student_crm_webform_cron_date', time());
}
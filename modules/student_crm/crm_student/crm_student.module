<?php

include_once('crm_student.features.inc');

/**
 * @file
 */

/**
 * Implements hook_init().
 */
function crm_student_init() {
  drupal_add_css(drupal_get_path('module', 'crm_student') . '/css/crm_student.css');
  drupal_add_js(drupal_get_path('module', 'crm_student') . '/js/crm_student.easycopy.js');
  drupal_add_js(drupal_get_path('module', 'crm_student') . '/js/crm_student.quicksearch.js');
  drupal_add_js(drupal_get_path('module', 'crm_student') . '/js/jquery.quicksearch.js');
}

/**
 * Implements hook_menu().
 */
function crm_student_menu() {
  $items = array();
  
  $items['crm/home'] = array(
    'title' => 'Home page',
    'page callback' => 'crm_student_home_page',
    'access callback' => 'crm_student_homepage_access',
  );
  
  $items['admin/config/crm'] = array(
    'title' => 'Student CRM',
    'description' => 'Generic settings for the student CRM site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_student_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'crm_student.admin.inc',
  );
  
  $items['admin/config/crm/settings'] = array(
    'title' => 'General Settings',
    'description' => 'Generic settings for the student CRM site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_student_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'crm_student.admin.inc',
  );
  
  $items['crm/admin/student'] = array(
    'title' => 'Student CRM Administration',
    'page callback' => 'crm_student_admin_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'crm_student.admin.inc',
  );
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function crm_student_permission() {
  return array('access student_crm dashboard' => array(
                'title' => t('Access Student CRM dashboard'),
                'description' => t('User can access the default dashboard homepage.'),
              )
             );
}

/**
 * Empty page callback for CRM homepage
 */
function crm_student_home_page() {
  if(user_access('access student_crm dashboard')) {
    drupal_goto('dashboard');
  }
  drupal_set_title(variable_get('site_name', 'Student CRM'));
  return '';
}

/**
 * Always true homepage access callback.
 */
function crm_student_homepage_access() {
  return TRUE;
}

/**
 * Implements hook_block_info().
 */
function crm_student_block_info() {
  $blocks['crm_student_search'] = array('info' => 'Student CRM search box');
  $blocks['crm_student_welcome'] = array('info' => 'Generic welcome message');
  $blocks['crm_student_user_widget'] = array('info' => 'User management & logout widget');
  $blocks['crm_student_admin_link'] = array('info' => 'Administer site link');
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function crm_student_block_view($delta) {
  switch($delta) {
    case 'crm_student_search':
      return array('content' => drupal_get_form('_crm_student_search_form'));
    case 'crm_student_welcome':
      $message = variable_get('crm_student_welcome_page', array('value' => '', 'format' => NULL));
      return array('content' => check_markup($message['value'], $message['format']));
    case 'crm_student_user_widget':
      return array('content' => l('Log out', 'user/logout', array('attributes' => array('id' => 'user-manage'))));
    case 'crm_student_admin_link':
      if(user_access('administer site configuration')) {
        return array('content' => l('Administer', 'crm/admin/student', array('attributes' => array('id' => 'site-manage'))));
      }
  }
}

function crm_student_block_view_alter(&$data, $block) {
  if ($block->module == 'menu' && $block->delta == 'menu-crm-navigation') {
    unset($data['subject']);
  }
}

/**
 * A generic search form
 */
function _crm_student_search_form() {
  $form = array();

  $form['#attributes']['class'][] = 'site-search-form';
  $form['search'] = array(
    '#type' => 'textfield',
    '#title' => '<span class="element-invisible">Search for students</span>',
    '#attributes' => array('class' => array('search-box'),
                           'placeholder' => 'Search'),
    '#default_value' => (isset($_GET['name'])) ? check_plain($_GET['name']) : '',
  );
  
  $form['#info']['contact_name_value']['label']['#attributes']['classs'][] = 'element-invisible';
  /**
  * $form['advanced'] = array(
  *   '#markup' => l('Advanced search', 'crm/search'),
  * );
  */
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
    '#attributes' => array('class' => array('element-invisible')),
  );
  
  return $form;
}

/**
 * A generic search form
 */
function _crm_student_search_form_submit($form, &$form_state) {
  $search_keys = array('name', 'student_id');
  foreach(module_invoke_all('crm_student_search_keys') as $keys) {
  	$search_keys = array_merge($search_keys, $keys);
  }
  $query = array();
  foreach($search_keys as $key) {
  	$query[$key] = $form_state['values']['search'];
  }
  drupal_goto('crm/search', array('query' => $query));
}

/**
 * Implements hook_user_login().
 */
function crm_student_user_login(&$edit, $account) {
  $sis_id = field_get_items('user', $account, 'field_user_sis_id');
  if(!$sis_id = $sis_id[0]['value']) {
    return;
  }
  $ids = db_select('field_data_field_student_id', 'i')
            ->condition('entity_type', 'crm_core_contact')
            ->condition('field_student_id_value', $sis_id)
            ->fields('i', array('entity_id'))
            ->execute()
            ->fetchAllKeyed(0, 0);
  $changed = false;
  $language = ($account->language) ? $account->language : LANGUAGE_NONE;
  $existing = field_get_items('user', $account, 'field_user_contact');
  $existing_contacts = array();
  foreach($existing as $k => $e) {
    $existing_contacts[$e['target_id']] = $e['target_id'];
    if(!$ids[$e['target_id']]) {
      unset($account->field_user_contact[$language][$k]);
      $changed = true;
    }
  }
  foreach($ids as $id) {
    if(!$existing_contacts[$id]) {
      $contact = crm_core_contact_load($id);
      if($contact) {
        $account->field_user_contact[$language][] = array('target_id' => $contact->contact_id,
                                                        'target_type' => 'crm_core_contact');
        $changed = true;
      }
    } 
  }
  if($changed) {
    user_save($account);
  }
}

/**
 * Implements hook_user_insert().
 */
function crm_student_user_insert(&$edit, $account, $category) {
  crm_student_user_login($edit, $account);
}

/**
 * Implements hook_crm_student_admin_links().
 */
function crm_student_crm_student_admin_links() {
	return array(
		'crm_core_contact' => array(
			'group' => t('Contact Records'),
			'title' => t('Manage contact types'),
			'description' => t('Manage the types of contacts (like "Student," or "Alumni").'),
			'href' => 'admin/structure/crm/contact-types',
		),
		'crm_activities' => array(
			'group' => t('Activities'),
			'title' => t('Manage activity types'),
			'description' => t('Manage the types of activities or notes.'),
			'href' => 'admin/structure/crm/activity-types',
		),
		'student_level' => array(
			'group' => t('Students'),
			'title' => t('Manage student levels'),
			'description' => t('Define and edit student levels (like "Junior" and "Senior").'),
			'href' => 'admin/structure/taxonomy/student_level',
		),
		'student_status' => array(
			'group' => t('Students'),
			'title' => t('Manage student statuses'),
			'description' => t('Define and edit student stauses (like "Graduated" and "Matriculated").'),
			'href' => 'admin/structure/taxonomy/student_status',
		),
	);
}

/**
 * Implementation of hook_FORM_ID_alter().
 */
function crm_student_form_views_exposed_form_alter(&$form, $form_state) {
  $form['submit']['#value'] = t('Search');
}

/**
 * Implements hook_feeds_plugins().
 */
function crm_student_feeds_plugins() {
  $info['CRMStudentAddresses'] = array(
    'name' => 'CRM Student address processor',
    'description' => 'Add and update addresses attached to contacts.',
    'help' => 'Create and update addresses from parsed content.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'CRMStudentAddresses',
      'file' => 'CRMStudentAddresses.inc',
      'path' => drupal_get_path('module', 'crm_student') . '/plugins',
    ),
  );
  return $info;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Removing endpoints from relation forms.
 */
function crm_student_form_relation_edit_form_alter(&$form, $form_stateqrelation) {
  if(!user_access('administer relation types')) {
    $form['endpoints']['#access'] = FALSE;
  }
}

/**
 * Implements hook_action_info().
 */
function crm_student_action_info() {
  return array(
    'crm_student_send_email_action' => array(
      'type' => 'crm_core_contact',
      'label' => t('Send contact e-mail'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Return a form definition so the Send contact email action can be configured.
 */
function crm_student_send_email_action_form($context) {
  // Set default values for form.
  if (!isset($context['recipient'])) {
    $context['recipient'] = '';
  }
  if (!isset($context['subject'])) {
    $context['subject'] = '';
  }
  if (!isset($context['message'])) {
    $context['message'] = '';
  }

  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $context['subject'],
    '#maxlength' => '254',
    '#description' => t('The subject of the message.'),
  );
  $form['message'] = array(
    '#type' => 'text_format',
    '#title' => t('Message'),
    '#default_value' => $context['message'],
    '#format' => NULL,
    '#cols' => '80',
    '#rows' => '15',
  );
  
  if (module_exists('token')) {
    $form['tokens'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('crm_core_contact'),
    );
  }
  return $form;
}

/**
 * Process crm_student_send_email_action form submissions.
 */
function crm_student_send_email_action_submit($form, $form_state) {
  $params = array(
    'subject'   => $form_state['values']['subject'],
    'message'   => $form_state['values']['message'],
  );
  return $params;
}

/**
 * Sends an e-mail message.
 */
function crm_student_send_email_action($entity, $context) {
  $email = field_get_items('crm_core_contact', $entity, 'field_contact_email');
  if (!$email[0]['email']) {
    return NULL;
  }

  $context['subject'] = token_replace($context['subject'], array(
                          'crm_core_contact' => $entity,
                        ));
  $context['message']['value'] = token_replace($context['message']['value'], array(
                          'crm_core_contact' => $entity,
                        ));
  drupal_mail('crm_student', 'action_send_email', $email[0]['email'], language_default(), $context);
}

/**
 * Implements hook_mail().
 */
function crm_student_mail($key, &$message, $params) {
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  $message['headers']['MIME-Version'] = '1.0';
  $message['headers']['Content-Transfer-Encoding'] = '8Bit';
  switch ($key) {
    case 'action_send_email': 
      $message['subject'] = $params['subject'];
      $message['body'][] = check_markup($params['message']['value'], $params['message']['format']);
      break;
  }
}

/**
 * Helper function to draw Google charts.
 */
function crm_student_draw_chart($chart) {
  module_load_include('inc', 'crm_student', 'crm_student.charts');
  return _crm_student_draw_chart($chart);
}
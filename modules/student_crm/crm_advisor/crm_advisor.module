<?php
/**
 * @file
 * Code for the CRM Advisor feature.
 */

include_once('crm_advisor.features.inc');

/**
 * Implements hook_menu().
 */
function crm_advisor_menu() {
  $items = array();
  
  $items['crm/advisor/add/%/%'] = array(
    'title' => 'Add advisor',
    'page callback' => 'crm_advisor_create_relation_page',
    'page arguments' => array(3, 4),
    'access arguments' => array('advise students'),
  );
  
  $items['crm/advisor/remove/%/%'] = array(
    'title' => 'Remove advisor',
    'page callback' => 'crm_advisor_delete_relation_page',
    'page arguments' => array(3, 4),
    'access arguments' => array('advise students'),
  );
  
  return $items;
}

/**
 * Page callback to delete a relation entity.
 */
function crm_advisor_delete_relation_page($contact, $advisor) {
  $contacts = _crm_advisor_get_advisor_contacts($advisor->uid);
  $rid = $contacts[$contact->contact_id];
  relation_delete($rid);
  $destination = (isset($_GET['destination']))
                   ? $_GET['destination']
                   : 'crm/contact/'. $contact->contact_id;
  drupal_set_message('User has been removed from advising list');
  drupal_goto($destination);
}

/**
 * Page callback to create a relation entity.
 */
function crm_advisor_create_relation_page($contact, $advisor) {
  $advisor = user_load($advisor);
  $contact = crm_contact_load($contact);
  if (!user_access('advise students', $advisor)) {
    drupal_set_message(t('This user cannot advise students'), 'error');
    drupal_goto('crm/contact/'. $contact->contact_id);
  }
  else {
    $rid = crm_advisor_create_relation($contact, $advisor);
    drupal_set_message(t('Advising relationship created'));
    $destination = (isset($_GET['destination']))
                   ? $_GET['destination']
                   : 'crm/contact/'. $contact->contact_id;
    drupal_goto('relation/'. $rid .'/edit', array('query' => array('destination' => $destination)));
  }
  return NULL;
}

/**
 * Helper function to create a relation entity
 */
function crm_advisor_create_relation($contact, $advisor) {
  $relation = relation_create('advisor', array(
                array('entity_type' => 'user',
                       'entity_bundle' => 'user',
                       'entity_id' => $advisor->uid,
                       'r_index' => 0,
                       ),
                  array('entity_type' => 'crm_contact',
                         'entity_bundle' => $contact->type, 
                         'entity_id' => $contact->contact_id,
                         'r_index' => 1,
                         ))
             );
   return relation_save($relation);
}
/**
 * Implements hook_permission().
 */
function crm_advisor_permission() {
  return array('advise students' => array(
          'title' => 'Advise students',
          'description' => 'User can view and create activities on students.',
        ),
  );
}

/**
 * Implements hook_block_info().
 */
function crm_advisor_block_info() {
  $blocks['crm_advisor_select_advisor'] = array('info' => 'Add as advisor link');
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function crm_advisor_block_view($delta) {
  $contact = _crm_advisor_get_contact();
  if (!$contact || !user_access('advise students')) {
    return NULL;
  }
  if ($delta == 'crm_advisor_select_advisor') {
    global $user;
    if (_crm_advisor_user_is_advisor($contact, $user)) {
      $link = l('Remove from your advising list', 
                'crm/advisor/remove/'. $contact->contact_id .'/'. $user->uid,
                array('attributes' => array('class' => array('tag', 'advisor-link', 'remove'))));
    }
    else {
      $link = l('Add to your advising list', 
                'crm/advisor/add/'. $contact->contact_id .'/'. $user->uid,
                array('attributes' => array('class' => array('tag', 'advisor-link', 'add'))));
    }
    return array('content' => $link);
  }
}

/**
 * Returns whether the provided user is an advisor with a contact
 */
function _crm_advisor_user_is_advisor($contact, $advisor = NULL) {
  if (!$advisor) {
    global $user;
    $advisor = $user;
  }
  $contacts = _crm_advisor_get_advisor_contacts($advisor->uid);
  return (isset($contacts[$contact->contact_id]))
         ? $contacts[$contact->contact_id]
         : FALSE;
}

function _crm_advisor_get_advisor_contacts($advisor_id) {
  $query = db_select('field_data_endpoints', 'e')
              ->condition('e.entity_type', 'relation')
              ->condition('e.bundle', 'advisor')
              ->condition('e.endpoints_entity_type', 'user')
              ->condition('e.endpoints_entity_id', $advisor_id);
  $query->leftJoin('field_data_endpoints', 'e2', 'e2.entity_id = e.entity_id AND e2.entity_type = e.entity_type');
  $query->fields('e2', array('endpoints_entity_id', 'entity_id'))
              ->condition('e2.endpoints_entity_type', 'crm_contact');
  $relations = $query->execute()
              ->fetchAllKeyed();
  return $relations;
}

/**
 * Helper function to retrieve contact information from current page.
 */
function _crm_advisor_get_contact() {
  $item = menu_get_item();
    if (isset($item['load_functions'][2]) && $item['load_functions'][2] == 'crm_contact_load') {
      if ($item['page_callback'] == 'crm_contact_view') {
        return $item['page_arguments'][0];
      }
      elseif ($item['page_callback'] == 'drupal_get_form') {
        return $item['page_arguments'][1];
      }
  }
}
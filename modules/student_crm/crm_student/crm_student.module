<?php

include_once('crm_student.features.inc');

/**
 * @file
 */

/**
 * Implements hook_init().
 */
function crm_student_init() {
  drupal_add_css(drupal_get_path('module', 'crm_student') . '/css/crm_student.css');
  drupal_add_js(drupal_get_path('module', 'crm_student') . '/js/crm_student.easycopy.js');
}

/**
 * Implements hook_menu().
 */
function crm_student_menu() {
  $items = array();
  
  $items['crm/home'] = array(
    'title' => 'Home page',
    'page callback' => 'crm_student_home_page',
    'access callback' => 'crm_student_homepage_access',
  );
  
  $items['admin/config/crm'] = array(
    'title' => 'Student CRM',
    'description' => 'Generic settings for the student CRM site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_student_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'crm_student.admin.inc',
  );
  
  $items['admin/config/crm/settings'] = array(
    'title' => 'General Settings',
    'description' => 'Generic settings for the student CRM site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_student_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'crm_student.admin.inc',
  );
  
  $items['crm/admin/student'] = array(
    'title' => 'Student CRM Administration',
    'page callback' => 'crm_student_admin_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'crm_student.admin.inc',
  );
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function crm_student_permission() {
  return array('access crm dashboard' => array(
                'title' => t('Access CRM dashboard'),
                'description' => t('User can access the default dashboard homepage.'),
              )
             );
}

/**
 * Empty page callback for CRM homepage
 */
function crm_student_home_page() {
  if(user_access('access dashboard')) {
    drupal_goto('dashboard');
  }
  drupal_set_title(variable_get('site_name', 'Student CRM'));
  return '';
}

/**
 * Always true homepage access callback.
 */
function crm_student_homepage_access() {
  return TRUE;
}

/**
 * Implements hook_block_info().
 */
function crm_student_block_info() {
  $blocks['crm_student_search'] = array('info' => 'Student CRM search box');
  $blocks['crm_student_welcome'] = array('info' => 'Generic welcome message');
  $blocks['crm_student_user_widget'] = array('info' => 'User management & logout widget');
  $blocks['crm_student_admin_link'] = array('info' => 'Administer site link');
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function crm_student_block_view($delta) {
  switch($delta) {
    case 'crm_student_search':
      return array('content' => drupal_get_form('_crm_student_search_form'));
    case 'crm_student_welcome':
      $message = variable_get('crm_student_welcome_page', array('value' => '', 'format' => NULL));
      return array('content' => check_markup($message['value'], $message['format']));
    case 'crm_student_user_widget':
      return array('content' => l('Log out', 'user/logout', array('attributes' => array('id' => 'user-manage'))));
    case 'crm_student_admin_link':
      if(user_access('administer site configuration')) {
        return array('content' => l('Administer', 'crm/admin/student', array('attributes' => array('id' => 'site-manage'))));
      }
  }
}

function crm_student_block_view_alter(&$data, $block) {
  if ($block->module == 'menu' && $block->delta == 'menu-crm-navigation') {
    unset($data['subject']);
  }
}

/**
 * A generic search form
 */
function _crm_student_search_form() {
  $form = array();

  $form['#attributes']['class'][] = 'site-search-form';
  $form['search'] = array(
    '#type' => 'textfield',
    '#title' => '<span class="element-invisible">Search for students</span>',
    '#attributes' => array('class' => array('search-box'),
                           'placeholder' => 'Search'),
    '#default_value' => (isset($_GET['name'])) ? check_plain($_GET['name']) : '',
  );
  
  $form['#info']['contact_name_value']['label']['#attributes']['classs'][] = 'element-invisible';
  /**
  * $form['advanced'] = array(
  *   '#markup' => l('Advanced search', 'crm/search'),
  * );
  */
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
    '#attributes' => array('class' => array('element-invisible')),
  );
  
  return $form;
}

/**
 * A generic search form
 */
function _crm_student_search_form_submit($form, &$form_state) {
  drupal_goto('crm/search', array('query' => array('name' => $form_state['values']['search'])));
}

/**
 * Implements hook_user_load().
 */
function crm_student_user_load($users) {
  foreach($users as $uid => $user) {
    $users[$uid]->crm_contact_records = crm_student_get_user_contact_records($user);
  }
}

/**
 * Helper function to retrieve the contact records for the given user.
 */
function crm_student_get_user_contact_records($account) {
  $query = db_select('field_data_endpoints', 'e')
              ->condition('e.entity_type', 'relation')
              ->condition('e.bundle', 'user_contact_record')
              ->condition('e.endpoints_entity_type', 'user')
              ->condition('e.endpoints_entity_id', $account->uid);
  $query->leftJoin('field_data_endpoints', 'e2', 'e2.entity_id = e.entity_id AND e2.entity_type = e.entity_type');
  $query->fields('e2', array('endpoints_entity_id'))
              ->condition('e2.endpoints_entity_type', 'crm_contact');
  return $query->execute()
              ->fetchAllKeyed(0, 0);
}

/**
 * Implements hook_user_login().
 */
function crm_student_user_login(&$edit, $account) {
  $sis_id = field_get_items('user', $account, 'field_user_sis_id');
  if(!$sis_id = $sis_id[0]['value']) {
    return;
  }
  $ids = db_select('field_data_field_student_id', 'i')
            ->condition('entity_type', 'crm_contact')
            ->condition('field_student_id_value', $sis_id)
            ->fields('i', array('entity_id'))
            ->execute()
            ->fetchAllKeyed(0, 0);
  foreach($ids as $id) {
    if(!$account->crm_contact_records[$id]) {
      $contact = crm_contact_load($id);
      $relation = relation_create('user_contact_record', array(
                array('entity_type' => 'user',
                       'entity_bundle' => 'user',
                       'entity_id' => $account->uid,
                       'r_index' => 0,
                       ),
                  array('entity_type' => 'crm_contact',
                         'entity_bundle' => $contact->type, 
                         'entity_id' => $contact->contact_id,
                         'r_index' => 1,
                         ))
             );
      relation_save($relation);
    } 
  }
}

/**
 * Implements hook_user_insert().
 */
function crm_student_user_insert(&$edit, $account, $category) {
  crm_student_user_login($edit, $account);
}

/**
 * Implements hook_crm_student_admin_links().
 */
function crm_student_crm_student_admin_links() {
	return array(
		'crm_contact' => array(
			'group' => t('Contact Records'),
			'title' => t('Manage contact types'),
			'description' => t('Manage the types of contacts (like "Student," or "Alumni").'),
			'href' => 'crm/admin/contact/types',
		),
		'crm_activities' => array(
			'group' => t('Activities'),
			'title' => t('Manage activity types'),
			'description' => t('Manage the types of activities or notes.'),
			'href' => 'crm/admin/activity/types',
		),
		'student_level' => array(
			'group' => t('Students'),
			'title' => t('Manage student levels'),
			'description' => t('Define and edit student levels (like "Junior" and "Senior").'),
			'href' => 'admin/structure/taxonomy/student_level',
		),
		'student_status' => array(
			'group' => t('Students'),
			'title' => t('Manage student statuses'),
			'description' => t('Define and edit student stauses (like "Graduated" and "Matriculated").'),
			'href' => 'admin/structure/taxonomy/student_status',
		),
	);
}
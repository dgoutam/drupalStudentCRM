<?php
/**
 * @file
 * Code for the Student CRM Webform feature.
 */

include_once('student_crm_webform.features.inc');

/**
 * Implements hook_init().
 */
function student_crm_webform_init() {
  drupal_add_js(drupal_get_path('module', 'student_crm_webform') .'/js/student_crm_webform.fancybox.js');
}

/**
 * Implements hook_menu().
 */
function student_crm_webform_menu() {
  $items = array();
  
  $items['crm/webform/%/%/%node/%'] = array(
    'page callback' => 'student_crm_webform_complete_form',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array(2, 3, 4, 5),
    'access callback' => 'student_crm_webform_complete_form_access',
  );
  
  return $items;
}

/**
 *  Implements hook_block_info().
 */
function student_crm_webform_block_info() {
  $blocks['student_crm_webform_send_form'] = array('info' => 'Send form emails.');
  return $blocks;
}

/**
 *  Implements hook_block_view().
 */
function student_crm_webform_block_view($delta) {
  if($delta = 'student_crm_webform_send_form') {
    module_load_include('inc', 'student_crm_webform', 'student_crm_webform.mail');
    return array('subject' => 'Send forms',
                 'content' => drupal_get_form('student_crm_webform_send_email_form'));  
  }
}

/**
 * Access callback - ensures the user's key is accurate & they have access to complete forms.
 */
function student_crm_webform_complete_form_access($entity_type, $entity_id, $webform, $key) {
  if(!user_access('complete crm webforms')) {
    return FALSE;
  }
  if($key != _student_crm_webform_generate_key($entity_type, $entity_id, $webform->nid)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Page callback - sets a session key for reusing later when the user submits a form.
 */
function student_crm_webform_complete_form($entity_type, $entity_id, $webform) {
  $_SESSION['student_crm_webform_form'][$webform->nid] = array('entity_type' => $entity_type,
                                                               'entity_id' => $entity_id);
  return drupal_render(node_view($webform, 'page'));
}

/**
 * Helper function to generate a form access key.
 */
function _student_crm_webform_generate_key($entity_type, $entity_id, $webform_nid) {
  return drupal_hmac_base64($entity_type .':'. 
                            $entity_id .':'. 
                            $webform_nid .':',
                            drupal_get_hash_salt());
}

/**
 * Implements hook_permission().
 */
function student_crm_webform_permission() {
  return array('complete crm webforms' => array(
              'title' => t('Fill out webforms attached to CRM entities'),
              'description' => t('Allowed to complete webforms that are later attached to CRM contacts or cases.')));
}

/**
 * Implements hook_webform_submission_entity_insert().
 */
function student_crm_webform_webform_submission_entity_insert($entity) {
  $submission = $_SESSION['student_crm_webform_form'][$entity->nid];
  if($submission['entity_type'] == 'crm_contact') {
    $target = crm_contact_load($submission['entity_id']);
    $target_type = $target->type;
  }
  
  $relation = relation_create('webform_submission_to_entities', array(
                    array('entity_type' => 'webform_submission_entity',
                         'entity_id' => $entity->wsid,
                         'r_index' => 0,
                         ),
                    array('entity_type' => $submission['entity_type'],
                           'entity_bundle' => $target_type, 
                           'entity_id' => $submission['entity_id'],
                           'r_index' => 1,))
               );
  relation_save($relation);
}

/**
* Implements hook_theme_registry_alter().
*/
function student_crm_webform_theme_registry_alter(&$theme_registry) {
  $theme_registry['webform_submission_page']['path'] = drupal_get_path('module', 'student_crm_webform');
  $theme_registry['webform_submission_page']['template'] = '/templates/webform-submission-page';
  $theme_registry['webform_submission_page']['path'] = drupal_get_path('module', 'student_crm_webform');
  $theme_registry['webform_submission_page']['template'] = '/templates/webform-submission-page';
}

/**
 * Implements hook_action_info().
 */
function s4_core_action_info() {
  return array(
    'student_crm_webform_action_send_form_email' => array(
        'type' => 'system',
        'label' => t('Send form email'),
        'configurable' => TRUE,
        'triggers' => array('any'),
      ),
  );
}

/**
 * Implements hook_field_info().
 */
function student_crm_webform_field_info() {
  return array(
    'student_crm_webform_attach' => array(
      'label' => t('Attached form'),
      'description' => t('Attach a form that needs to be filled out by a user or anonymous person.'),
      'settings' => array(),
      'instance_settings' => array( ),
      'default_widget' => 'student_crm_webform_field_widget',
      'default_formatter' => 'attached_form',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function student_crm_webform_field_widget_info() {
  return array(
    'student_crm_webform_field_widget' => array(
      'label' => t('Attached form'),
      'field types' => array('student_crm_webform_attach'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_hook_field_widget_form().
 */
function hook_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  return array();
}

/**
 * Implements hook_field_instance_settings_form().
 */
function student_crm_webform_field_instance_settings_form($field, $instance) {
  drupal_add_js(drupal_get_path('module', 'student_crm_webform') .'/js/student_crm_webform.field_instance.js');
  $defaults   = field_info_instance_settings($field['type']);
  $settings   = array_merge($defaults, $instance['settings']);

  $form = array();
  
  $webforms = db_select('node', 'n')
              ->fields('n', array('nid', 'title'))
              ->condition('n.type', 
                          variable_get('webform_node_types', array('webform')), 'in')
              ->condition('n.status', 1)
              ->execute()
              ->fetchAllKeyed();
              
  
  $form['webform'] = array(
    '#type' => 'select',
    '#title' => t('Required form'),
    '#default_value' => (isset($settings['webform'])) ? $settings['webform'] : 0,
    '#options' => $webforms,
  );
  
  $form['webform'] = array(
    '#type' => 'select',
    '#title' => t('Required form'),
    '#default_value' => (isset($settings['webform'])) ? $settings['webform'] : 0,
    '#options' => $webforms,
  );
  
  $form['email_address'] = array(
    '#type' => 'select',
    '#title' => 'Who should receive the email for this form?',
    '#default_value' => (isset($settings['email_address'])) ? $settings['email_address'] : 'manual',
    '#options' => array('contact' => 'Contact attached to the case',
                        'manual'  => 'Manual entry',
                        'field'   => 'Email address from another field'
                        ),
  );
  
  $email_field_options = array();
  $fields = field_info_instances();
  $fields = $fields[$instance['entity_type']][$instance['bundle']];
  foreach($fields as $field_name => $field) {
    if($field['widget']['module'] == 'email') {
      $email_field_options[$field_name] = $field['label'];
    }
  }
  $form['email_field'] = array(
		'#type' => 'select',
		'#prefix' => '<div id="email-field-source-select">',
		'#suffix' => '</div>',
		'#title' => 'Email field',
    '#default_value' => (isset($settings['email_field'])) ? $settings['email_field'] : 0,
		'#options' => $email_field_options,
	);

  $form['email_subject'] = array(
    '#type' => 'textfield',
    '#title' => 'Email subject',
    '#default_value' => (isset($settings['email_subject'])) ? $settings['email_subject'] : '',
  );
  
  $form['email_body'] = array(
    '#type' => 'textarea',
    '#title' => 'Email body',
    '#default_value' => (isset($settings['email_body'])) ? $settings['email_body'] : '',
  );
  
  if (module_exists('token')) {
    $form['email_tokens'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('crm_case', 'crm_contact'),
    );
  }

  return $form;
}

/**
 * Implements hook_field_validate().
 */
function student_crm_webform_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * Implements hook_field_presave().
 */
function student_crm_webform_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {

}

/**
 * Implements hook_field_formatter_view().
 */
function student_crm_webform_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  return array();
}

/**
 * Implements hook_field_is_empty().
 */
function student_crm_webform_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_formatter_info().
 */
function student_crm_webform_field_formatter_info() {
  return array(
    'attached_form' => array(
      'label' => t('Attached form (default)'),
      'field types' => array('student_crm_webform_attach'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function student_crm_webform_theme() {
  return array(
    'student_crm_webform_formatter_attached_form' => array(
      'variables' => array('element' => NULL),
    ),
  );
}
/**
 * Theme function for 'default' or global attached form field formatter.
 */
function theme_student_crm_webform_formatter_attached_form($element) {
  return null;
}
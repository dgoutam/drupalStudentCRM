<?php

define('STUDENT_CRM_DEFAULT_TYPE', 'note');

/**
 * @file
 * Code for the Student CRM Activity feature.
 */

include_once('student_crm_activity.features.inc');

/**
 * Implements hook_block_info().
 */
function student_crm_activity_block_info() {
  $blocks['student_crm_activity_create'] = array('info' => 'Create activity form');
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function student_crm_activity_block_view($delta) {
  if ($delta == 'student_crm_activity_create') {
    return array('subject' => 'Add a note',
                 'content' => drupal_get_form('student_crm_activity_create'));
  }
}

/**
 * Implements hook_permission().
 */
function student_crm_activity_permission() {
  return array('send email to contact via activities' => array(
                'title' => t('Allowed to send an email when an activity is created'),
                'description' => t('Users will be able to check an "Email contact" option when posting activities.'),
                ),
              );
}

/**
 * Implements hook_theme_registry_alter().
 */
function student_crm_activity_theme($existing, $type, $theme, $path) {
  return array(
    'crm_core_activity' => array(
      'variables' => array('element' => null),
      'template' => 'crm_core_activity'
    ),
  );
}
/**
 * Create activity form.
 */
function student_crm_activity_create($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'student_crm_activity') .'/js/jquery.color.js');
  drupal_add_js(drupal_get_path('module', 'student_crm_activity') .'/js/student_crm_activity.form.js');
  drupal_add_css(drupal_get_path('module', 'student_crm_activity') .'/css/student_crm_activity.css');
  
  $activity_type = (isset($form_state['values']['activity_type'])) 
                   ? $form_state['values']['activity_type'] 
                   : STUDENT_CRM_DEFAULT_TYPE;
  global $user;
  $form = array();
  
  $form['#prefix'] = '<div id="activity-sub-form">';
  $form['#suffix'] = '</div>';
  
  $entity = array();
  if (isset($form_state['values']['entity'])) {
    $entity = $form_state['values']['entity'];
  }
  elseif (isset($form_state['complete form']['entity'])) {
    $entity = $form_state['complete form']['entity']['#value'];
  }
  else {
    if ($case = menu_get_object('crm_case', 2)) {
      $entity['type'] = 'crm_case';
      $entity['bundle'] = $case->type;
      $entity['id'] = $case->cid;
      $entity['crm_contact'] = crm_case_get_contact($case);
    }
    if ($contact = menu_get_object('crm_core_contact', 2)) {
      $entity['type'] = 'crm_core_contact';
      $entity['bundle'] = $contact->type;
      $entity['id'] = $contact->contact_id;
      $entity['crm_contact'] = $contact;
    }
  }
  $form['entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );
  
  $types = crm_core_activity_types();
  $options = array();
  foreach ($types as $type) {
    $restrict = variable_get('student_crm_activity_restrict_'. $type->type, FALSE);
    if ((user_access('administer crm activities') 
       || user_access("create crm_core_activity entities of bundle $type->type")) && (
        !$restrict || 
        $restrict[$entity['type'] .':'. $entity['bundle']] || 
        $restrict[$entity['type'] .':*'])
        ) {
      $options[$type->type] = $type->label;
    }
  }
  if (!count($options)) {
    $form = array();
    $form['message'] = array(
      '#markup' => '<h3 class="empty">'. t('You cannot create a note on this page.') .'</h3>',
    );
    return $form;
  }
  
  $form['activity_type'] = array(
    '#type' => 'select',
    '#title' => 'Note type',
    '#options' => $options,
    '#default_value' => STUDENT_CRM_DEFAULT_TYPE,
    '#ajax' => array(
      'callback' => 'student_crm_activity_activity_form',
      'wrapper' => 'activity-sub-form',
      'progress' => array(
        'type' => 'throbber',
        'message' => 'Getting form',
      ),
    ),
    '#weight' => -20,
  );
  $crm_activity = crm_core_activity_create(array('type' => $activity_type,
                                                 'field_activity_participants' => array(
                                                  LANGUAGE_NONE => array(array(
                                                      'target_id' => $entity['crm_contact']->contact_id,
                                                      'target_type' => 'crm_core_contact',
                                                    ),
                                                  )),
                                                  ));
  
  $form_state['crm_core_activity'] = $crm_activity;
  field_attach_form('crm_core_activity', $crm_activity, $form, $form_state);
  $form['field_activity_participants']['#access'] = FALSE;
  $form['field_activity_date']['#access'] = FALSE;
  $form['form-actions'] = array(
    '#type' => 'actions',
  );
  
  $form['form-actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save note'),
    '#ajax' => array(
      'callback' => 'student_crm_activity_activity_form',
      'wrapper' => 'activity-sub-form',
      'name' => 'submit1',
    ),
  );
  
  if (user_access('send email to contact via activities')) {
    $form['form-actions']['email_contact'] = array(
      '#type' => 'checkbox',
      '#title' => t('Email this note'),
    );
  }
  
  return $form;
}

/**
 * Ajax callback to redraw form when the note type changes.
 */
function student_crm_activity_activity_form(&$form, $form_state) {
  return $form;
}

/**
 * Create activity form submit.
 */
function student_crm_activity_create_submit($form, &$form_state) {
  global $user;
  $crm_activity = $form_state['crm_core_activity'];
  // Notify field widgets.
  
  field_attach_submit('crm_core_activity', $crm_activity, $form, $form_state);

  $crm_activity->created = time();
  $crm_activity->changed = time();
  $crm_activity->uid = $user->uid;
  $activity_id = crm_core_activity_save($crm_activity);
  $form_state['activity_id'] = $crm_activity->activity_id;
  $relation = relation_create('crm_core_activity', array(
                array('entity_type' => 'crm_core_activity',
                       'entity_bundle' => $crm_activity->type,
                       'entity_id' => $crm_activity->activity_id,
                       'r_index' => 0,
                       ),
                  array('entity_type' => $form_state['values']['entity']['type'],
                         'entity_bundle' => $form_state['values']['entity']['bundle'], 
                         'entity_id' => $form_state['values']['entity']['id'],
                         'r_index' => 1,
                         ))
             );
  relation_save($relation);
  if($form_state['values']['email_contact']) {
    if ($form_state['values']['entity']['type'] == 'crm_core_contact') {
      $subject = t('Your record');
    }
    elseif ($form_state['values']['entity']['type'] == 'crm_case') {
      $case = crm_case_load($form_state['values']['entity']['id']);
      $subject = $case->name;
    }
    $contact = $form_state['values']['entity']['crm_contact'];
    $email = field_get_items('crm_core_contact', $contact, 'field_contact_email');
    $params = array('activity' => $crm_activity,
                    'subject' => $subject);
    drupal_mail('student_crm_activity', 'activity', $email[0]['email'], $contact->language, $params);
  }
}

/**
 * Implements hook_crm_case_delete().
 */
function student_crm_activity_crm_case_delete($case) {
  $activities_relations = db_select('field_data_endpoints', 'e')
                            ->condition('entity_type', 'relation')
                            ->condition('bundle', 'crm_core_activity')
                            ->condition('endpoints_entity_type', 'crm_case')
                            ->condition('endpoints_entity_id', $case->cid)
                            ->fields('e', array('entity_id'))
                            ->execute()
                            ->fetchAllKeyed(0,0);
  student_crm_activity_delete_from_relation($activities_relations);
}

/**
 * Implements hook_crm_core_contact_delete().
 */
function student_crm_activity_crm_core_contact_delete($contact) {
  $activities_relations = db_select('field_data_endpoints', 'e')
                            ->condition('entity_type', 'relation')
                            ->condition('bundle', 'crm_core_activity')
                            ->condition('endpoints_entity_type', 'crm_core_contact')
                            ->condition('endpoints_entity_id', $contact->contact_id)
                            ->fields('e', array('entity_id'))
                            ->execute()
                            ->fetchAllKeyed(0,0);
  student_crm_activity_delete_from_relation($activities_relations);
}

/**
 * Helper function to delete all activities attached to a list of relation IDs.
 */
function student_crm_activity_delete_from_relation($activities_relations) {
  foreach($activities_relations as $rid) {
    $activity_id = db_select('field_data_endpoints', 'e')
                         ->condition('entity_type', 'relation')
                         ->condition('bundle', 'crm_core_activity')
                         ->condition('endpoints_entity_type', 'crm_core_activity')
                         ->condition('entity_id', $rid)
                         ->fields('e', array('endpoints_entity_id'))
                         ->execute()
                         ->fetchField();
    $activity = crm_core_activity_load($activity_id);
    crm_core_activity_delete($activity);
    relation_delete($rid);
  }
}

/**
 * Implements hook_mail().
 */
function student_crm_activity_mail($key, &$message, $params) {
  if($key == 'activity') {
    $message['subject'] = t('A note has been left on @record', array('@record' => $params['subject']));
    
    module_load_include('inc', 'crm_core_activity_ui', 'crm_core_activity_ui.pages');
    $message['body'][] = drupal_render(crm_core_activity_view($params['activity']));
    
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  }
}

/**
 * Alter the activity type form to add in options for restricitng posting to certain
 * entity/bundle types.
 */
function student_crm_activity_form_crm_activity_type_form_alter(&$form, $form_state) {
  
  $form['entity_restrictions'] = array(
    '#type' => 'fieldset',
    '#title' => 'Advanced options',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  $bundles = array();
  foreach (entity_get_info() as $entity_type => $entity) {
    $bundles[$entity['label']]["$entity_type:*"] = 'all ' . $entity['label'] . ' bundles';
    $counter += 2;
    if (isset($entity['bundles'])) {
      foreach ($entity['bundles'] as $bundle_id => $bundle) {
        $bundles[$entity['label']]["$entity_type:$bundle_id"] = $bundle['label'];
        $counter++;
      }
    }
  }
  
  $form['entity_restrictions']['entity_types'] = array(
    '#type' => 'select',
    '#title' => 'Restrict to only entity types',
    '#options' => $bundles,
    '#default_value' => variable_get('student_crm_activity_restrict_'. $form['type']['#default_value'], array()),
    '#multiple' => TRUE,
  );
  
  $form['#submit'][] = 'student_crm_activity_form_crm_activity_type_form_alter_submit';
}

/**
 * Form submit callback for editing activity types.
 */
function student_crm_activity_form_crm_activity_type_form_alter_submit($form, $form_state) {
  $save = FALSE;
  foreach ($form_state['values']['entity_types'] as $type) {
    if ($type) {
      $save = $form_state['values']['entity_types'];
      break;
    }
  }
  variable_set('student_crm_activity_restrict_'. $form['type']['#default_value'], $save);
}

/**
 * Implements hook_feeds_plugins().
 */
function student_crm_activity_feeds_plugins() {
  $info['StudentCRMActivityFeedsProcessor'] = array(
    'name' => 'CRM Activity processor',
    'description' => 'Add and update activities attached to contacts.',
    'help' => 'Create and update activities from parsed content.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'StudentCRMActivityFeedsProcessor',
      'file' => 'StudentCRMActivityFeedsProcessor.inc',
      'path' => drupal_get_path('module', 'student_crm_activity') . '/plugins',
    ),
  );
  return $info;
}

/*
 * Implements hook_enable().
 */
function student_crm_activity_enable() {
  //clear the cache to display in Feeds as available plugin.
  cache_clear_all('plugins:feeds:plugins', 'cache');
}
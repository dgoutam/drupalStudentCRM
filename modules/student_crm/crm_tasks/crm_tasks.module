<?php
/**
 * @file
 * Code for the CRM Tasks feature.
 */

include_once('crm_tasks.features.inc');

/**
 * Implements hook_menu().
 */
function crm_tasks_menu() {
  $items = array();
  
  $items['crm/tasks/mark/%/%'] = array(
    'title' => 'Mark task',
    'page callback' => 'crm_tasks_mark_task',
    'page arguments' => array(3, 4),
    'access callback' => 'crm_tasks_mark_task_access',
    'access arguments' => array(3),
  );
  
  $items['ajax/crm/tasks/user-autocomplete'] = array(
    'title' => 'Username autocomplete',
    'page callback' => 'crm_tasks_username_autocomplete',
    'access arguments' => array('access user profiles'),
  );
  
  $items['admin/config/crm/tasks'] = array(
    'title' => 'CRM Task settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_tasks_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'crm_tasks.admin.inc',
  );
  
  return $items;
}

/**
 * Autocomplete callback to return users who can have a task list.
 */
function crm_tasks_username_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $result = db_select('users')->fields('users', array('uid', 'name'))->condition('name', db_like($string) . '%', 'LIKE')->range(0, 100)->execute();
    foreach ($result as $user) {
      if (user_access('maintain own task list', user_load($user->uid))) {
        $matches[$user->name] = check_plain($user->name);
      }
    }
    $matches = array_chunk($matches, 10, TRUE);
    $matches = $matches[0];
  }

  drupal_json_output($matches);
}


/**
 * Menu access callback for marking tasks.
 */
function crm_tasks_mark_task_access($task) {
  $relation = relation_load($task);
  global $user;
  if ($relation) {
    return ($relation->uid == $user->uid);
  }
  return FALSE;
}

/**
 * Page callback to mark a task.
 */
function crm_tasks_mark_task($task, $status) {
  $relation = relation_load($task);
  $mark = ($status == 'mark') ? 1 : 0;
  $language = ($relation->language) ? $relation->language : LANGUAGE_NONE;
  $relation->field_task_complete[$language][0]['value'] = $mark;
  relation_save($relation);
  drupal_json_output(array('success' => true, 'mark' => $mark, 'relation' => $relation->rid));
}

/**
 * Implements hook_block_info().
 */
function crm_tasks_block_info() {
  $blocks['crm_tasks_new_task'] = array('info' => 'New task form');
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function crm_tasks_block_view($delta) {
  if ($delta == 'crm_tasks_new_task' && user_access('maintain own task list')) {
    $modal_link = l('Add to tasks', null, array('fragment' => 'edit-task-modal', 'external' => TRUE, 'attributes' => array('id' => 'show-add-tasks')));
    return array('content' => $modal_link . drupal_render(drupal_get_form('crm_tasks_create_task_form')));
  }
}

/**
 * Create task form
 */
function crm_tasks_create_task_form() {
  drupal_add_js(drupal_get_path('module', 'crm_tasks') .'/js/crm_tasks.js');
  drupal_add_css(drupal_get_path('module', 'crm_tasks') .'/css/crm_tasks.css');
  $form = array();
  
  $form['#attributes']['id'] = 'edit-task-modal';
  $form['#attributes']['class'][] = 'element-invisible';
  
  $form['target_id'] = array(
    '#type' => 'hidden'
  );
  
  $form['target_bundle'] = array(
    '#type' => 'hidden'
  );
  
  $form['target_entity'] = array(
    '#type' => 'hidden'
  );
  
  if ($contact = menu_get_object('crm_core_contact', 2)) {
    $form['target_id']['#value'] = $contact->contact_id;
    $form['target_bundle']['#value'] = $contact->type;
    $form['target_entity']['#value'] = 'crm_core_contact';
  }
  if ($case = menu_get_object('crm_case', 2)) {
    $form['target_id']['#value'] = $case->cid;
    $form['target_bundle']['#value'] = $case->type;
    $form['target_entity']['#value'] = 'crm_case';
  }
  if ($node = menu_get_object('node')) {
    $form['target_id']['#value'] = $node->nid;
    $form['target_bundle']['#value'] = $node->type;
    $form['target_entity']['#value'] = 'node';
  }
  
  if (user_access('create tasks for other users')) {
    global $user;
    $form['assigned_user'] = array(
      '#type' => 'textfield',
      '#title' => 'Assign to someone else',
      '#default_value' => strip_tags(theme('username', array('account' => $user, 'link_path' => FALSE))),
      '#autocomplete_path' => 'ajax/crm/tasks/user-autocomplete',
    );
  }
  
  $form['date'] = array(
    '#type' => 'date_popup',
    '#title' => 'Due date',
    '#date_format' => 'Y-m-d',
  );
  
  $form['note'] = array(
    '#type' => 'textfield',
    '#title' => 'Note',
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save task',
  );
  
  $form['cancel'] = array(
    '#markup' => l('Cancel', '', array('fragment' => 'task-cancel', 'external' => TRUE, 'attributes' => array('id' => 'task-cancel'))),
  );
  
  return $form;
}

/**
 * Create task form submit
 */
function crm_tasks_create_task_form_submit($form, $form_state) {
  if ($form_state['values']['assigned_user']) {
    $uid = db_select('users')->fields('users', array('uid'))->condition('name', $form_state['values']['assigned_user'])->execute()->fetchField();
    $target_user = user_load($uid);
  }
  else {
    global $user;
    $target_user = $user;
  }
  $relation = relation_create('crm_task', array(
                  array('entity_type' => 'user',
                         'entity_bundle' => 'user',
                         'entity_id' => $target_user->uid,
                         'r_index' => 0,
                         ),
                  array('entity_type' => $form_state['values']['target_entity'],
                         'entity_bundle' => $form_state['values']['target_bundle'], 
                         'entity_id' => $form_state['values']['target_id'],
                         'r_index' => 1,
                         ))
               );
  $rid = relation_save($relation);
  $relation = relation_load($rid);
  $language = ($relation->language) ? $relation->language : LANGUAGE_NONE;
  $relation->field_task_due[$language][0]['value'] = $form_state['values']['date'];
  $relation->field_task_note[$language][0]['value'] = check_plain($form_state['values']['note']);
  relation_save($relation);
  drupal_set_message(t('Your task has been created.'));
}

/**
 * Implements hook_permission().
 */
function crm_tasks_permission() {
  return array(
    'maintain own task list' => array(
      'title' => t('Maintain own task list'),
      'description' => t('User can add and maintain their own list of tasks.'),
    ),
    'create tasks for other users' => array(
      'title' => t('Create tasks for other users'),
      'description' => t('User can add tasks to the lists of other users.'),
    ),
  );
}



/**
 * Implementation of hook_cron().
 */
function crm_tasks_cron() {
  $task_cron = variable_get('crm_tasks_cron_date', date('Y-m-d', 0));
  if(!variable_get('crm_tasks_enable_mail', 0) || strtotime($task_cron) >= strtotime(date('Y-m-d')) || date('G') < variable_get('crm_tasks_cron_time', 8)) {
    return;
  }
  $query = db_select('field_data_field_task_due', 'd')
             ->condition('d.field_task_due_value', $task_cron)
             ->condition('d.bundle', 'crm_task')
             ->condition('d.entity_type', 'relation')
             ->fields('d', array('entity_id'));
  $query->leftJoin('relation', 'r', 'r.relation_type = d.bundle AND r.rid = d.entity_id');
  $query->fields('r', array('uid', 'rid'));
  $query->leftJoin('field_data_field_task_complete', 'c', 'c.entity_id = d.entity_id AND c.bundle = d.bundle');
  $query->condition('c.field_task_complete_value', 0);
  $query->fields('u', array('mail'));
  $query->leftJoin('users', 'u', 'u.uid = r.uid');
  $query->fields('u', array('mail'));
  $query->leftJoin('field_data_endpoints', 'e', 'r.rid = e.entity_id AND e.entity_type = :relation AND e.endpoints_entity_type != :user', array(':relation' => 'relation', ':user' => 'user'));
  $query->fields('e', array('endpoints_entity_type', 'endpoints_entity_id'));
  $query->leftJoin('field_data_field_task_note', 'n', 'n.entity_id = r.rid AND n.bundle = :crm_task', array(':crm_task' => 'crm_task'));
  $query->fields('n', array('field_task_note_value', 'field_task_note_format'));
  $results = $query->execute()
             ->fetchAll();
  $task_notifications = array();
  foreach($results as $task) {
    $task_notifications[$task->uid][$task->rid] = $task;
    $task_notifications[$task->uid]['mail'] = $task->mail;
  }
  crm_tasks_send_notifications($task_notifications);
  variable_set('crm_tasks_cron_date', date('Y-m-d'));
}

/**
 * Sends task notifications to users.
 */
function crm_tasks_send_notifications($task_notifications) {
  foreach($task_notifications as $uid => $tasks) {
    $mail = $tasks['mail'];
    unset($tasks['mail']);
    drupal_mail('crm_tasks', 'task_notifications', $mail, language_default(), array('tasks' => $tasks));
  }
}

/**
 * Implmenets hook_mail().
 */
function crm_tasks_mail($key, &$message, $params) {
  if($key == 'task_notifications') {
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
    $message['headers']['MIME-Version'] = '1.0';
    $message['headers']['Content-Transfer-Encoding'] = '8Bit';
    $message['subject'] = t('@site_name: Today\'s tasks', array('@site_name' => variable_get('site_name', '')));
    $message['body'][] = t('The following tasks are marked as due today.');
    $items = array();
    foreach($params['tasks'] as $task) {
      if($task->endpoints_entity_type == 'crm_core_contact') {
        $target_name = db_select('field_data_contact_name', 'n')
                         ->fields('n')
                         ->condition('n.entity_type', 'crm_core_contact')
                         ->condition('n.entity_id', $task->endpoints_entity_id)
                         ->execute()
                         ->fetchAll();
        $name = array();
        foreach((array)$target_name[0] as $k => $n) {
          $name[str_replace('contact_name_', '', $k)] = $n;
        }
        $target_name = name_format($name, 'g+if');
      }
      if($task->endpoints_entity_type == 'crm_case') {
        $target_name = db_select('crm_case', 'c')
                         ->fields('c', array('name'))
                         ->condition('c.cid', $task->endpoints_entity_id)
                         ->execute()
                         ->fetchField();
      }
      $format = ($task->field_task_note_format) ? $task->field_task_note_format : filter_default_format();
      $items[] = t('%title: !note', array('%title' => check_plain($target_name),
                      '!note' => check_markup($task->field_task_note_value, $format)));
    }
    $message['body'][] = theme('item_list', array('items' => $items));
    $message['body'][] = l('View all pending tasks', 'crm/tasks', array('absolute' => TRUE));
  }
}